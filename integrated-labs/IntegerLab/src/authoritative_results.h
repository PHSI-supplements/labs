/*                       *
 * DO NOT EDIT THIS FILE *
 *                       */

/**************************************************************************//**
 *
 * @file authoritative_results.h
 *
 * @author Christopher A. Bohn
 *
 * @brief Function prototypes to get authoritative results, and definitions to
 *      select the implementation appropriate for the target machine.
 *
 ******************************************************************************/

/*
 * IntegerLab (c) 2018-24 Christopher A. Bohn
 *
 * Starter code licensed under the Apache License, Version 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */

#ifndef AUTHORITATIVE_RESULTS_H
#define AUTHORITATIVE_RESULTS_H

#include <stdint.h>

struct authoritative_result {
    uint16_t result;
    uint16_t supplemental_result;
    uint8_t zero_flag;
    uint8_t sign_flag;
    uint8_t overflow_flag;
    uint8_t carry_flag;
};

[[gnu:no_instrument_function]] void evaluate_addition(uint16_t operand1, uint16_t operand2, struct authoritative_result *result);
[[gnu:no_instrument_function]] void evaluate_subtraction(uint16_t operand1, uint16_t operand2, struct authoritative_result *result);
[[gnu:no_instrument_function]] void evaluate_unsigned_multiplication(uint16_t operand1, uint16_t operand2, struct authoritative_result *result);
[[gnu:no_instrument_function]] void evaluate_unsigned_division(uint16_t operand1, uint16_t operand2, struct authoritative_result *result);
[[gnu:no_instrument_function]] void evaluate_signed_multiplication(uint16_t operand1, uint16_t operand2, struct authoritative_result *result);
[[gnu:no_instrument_function]] void evaluate_signed_division(uint16_t operand1, uint16_t operand2, struct authoritative_result *result);

#endif //AUTHORITATIVE_RESULTS_H
