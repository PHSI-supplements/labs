/*                       *
 * DO NOT EDIT THIS FILE *
 *                       */

/**************************************************************************//**
 *
 * @file fpu.h
 *
 * @author Christopher A. Bohn
 *
 * @brief Function prototypes and type declarations for FloatLab.
 *
 ******************************************************************************/

/*
 * FloatLab (c) 2019-25 Christopher A. Bohn
 *
 * Starter code licensed under the Apache License, Version 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */

#ifndef FPU_H
#define FPU_H

#include <stdint.h>
#include "unnormal.h"

typedef uint32_t ieee754_t;

enum bit_divider_direction {
    NONE, FROM_LEFT, FROM_RIGHT
};

bool is_infinity(ieee754_t number);
bool is_nan(ieee754_t number);
bool is_zero(ieee754_t number);
bool is_negative(ieee754_t number);

uint8_t get_754_integer(ieee754_t number);
uint32_t get_754_fraction(ieee754_t number);
int8_t get_754_exponent(ieee754_t number);

char *bits_to_string(char *destination, uint64_t bits, int start_bit,
                     int end_bit, enum bit_divider_direction bit_dividers);
char *ieee754_to_string(char *destination, ieee754_t number);

unnormal_t decode(ieee754_t number);
ieee754_t encode(unnormal_t number);
ieee754_t round_to_nearest_even(ieee754_t unrounded_number, uint64_t original_fraction);

ieee754_t negate(ieee754_t number);
ieee754_t add(ieee754_t augend, ieee754_t addend);
ieee754_t subtract(ieee754_t menuend, ieee754_t subtrahend);
ieee754_t multiply(ieee754_t multiplicand, ieee754_t multiplier);
ieee754_t divide(ieee754_t dividend, ieee754_t divisor);

#endif //FPU_H
