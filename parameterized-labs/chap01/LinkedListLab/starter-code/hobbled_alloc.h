/*                       *
 * DO NOT EDIT THIS FILE *
 *                       */

/**************************************************************************//**
 *
 * @file hobbled_alloc.h
 *
 * @author Christopher A. Bohn
 *
 * @brief Functions to simulate not being able to allocate more than 32KB of
 *      contiguous memory.
 *
 ******************************************************************************/

/*
 * LinkedListLab (c) 2021-24 Christopher A. Bohn
 *
 * Starter code licensed under the Apache License, Version 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */

#ifndef HOBBLED_ALLOC_H
#define HOBBLED_ALLOC_H

#include <stdlib.h>

static const size_t MAXIMUM_CONTIGUOUS_MEMORY = 1 << 15;

static inline void *hobbled_malloc(size_t size) {
#ifdef HOBBLE
    if (size > MAXIMUM_CONTIGUOUS_MEMORY) {
        return NULL;
    }
#endif //HOBBLE
    return malloc(size);
}

static inline void *hobbled_calloc(size_t count, size_t size) {
#ifdef HOBBLE
    if (size > MAXIMUM_CONTIGUOUS_MEMORY) {
        return NULL;
    }
#endif //HOBBLE
    return calloc(count, size);
}

static inline void *hobbled_realloc(void *ptr, size_t size) {
#ifdef HOBBLE
    if (size > MAXIMUM_CONTIGUOUS_MEMORY) {
        return NULL;
    }
#endif //HOBBLE
    return realloc(ptr, size);
}

#endif //HOBBLED_ALLOC_H
