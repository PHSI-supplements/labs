/*                       *
 * DO NOT EDIT THIS FILE *
 *                       */

/**************************************************************************//**
 *
 * @file linked_list.h
 *
 * @author Christopher A. Bohn
 *
 * @brief Structure definitions for linked list handle and nodes.
 *
 ******************************************************************************/

/*
 * LinkedListLab (c) 2021-25 Christopher A. Bohn
 *
 * Starter code licensed under the Apache License, Version 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */

#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include "list.h"

/**
 * A forward declaration of the `node_t` type so that `node_t` can be used in
 * the type definition.
 */
typedef struct node_definition node_t;

/**
 * The type definition for a linked list node.
 * <ul>
 * <li><code>word_entry</code> the node's payload
 * <li><code>next</code> a pointer to the iterate_next node in the linked list
 * <li><code>previous</code> a pointer to the iterate_previous node in the linked list
 * </ul>
 */
struct node_definition {
    word_entry_t *word_entry;
    node_t *next;
    node_t *previous;
};

/**
 * The type definition for a linked list.
 * <ul>
 * <li><code>head</code> a pointer to the first node in the linked list
 * <li><code>tail</code> a pointer to the last node in the linked list
 * <li><code>iterator</code> a pointer to the the currently-valid iterator if
 *      one exists (if there is no valid iterator, then it's simplest to point
 *      to the previously-valid iterator so it can be reset/reused without
 *      having to create a new one)
 * </ul>
 */
struct list_definition {
    node_t *head;
    node_t *tail;
    iterator_t *iterator;
};

/**
 * The type definition for a linked list iterator.
 * <ul>
 * <li><code>list</code> a pointer to the iterator's list
 * <li><code>current_node</code> a pointer to the current node
 * </ul>
 */
struct iterator_definition {
    list_t *list;
    node_t *current_node;
};

#endif //LINKED_LIST_H
