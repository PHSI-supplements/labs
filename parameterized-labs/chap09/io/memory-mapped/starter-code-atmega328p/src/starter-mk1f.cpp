/*                       *
 * DO NOT EDIT THIS FILE *
 *                       */

/**************************************************************************//**
 *
 * @file starter-mk1f.cpp
 *
 * @author Christopher A. Bohn
 *
 * @brief Driver code for PollingLab that is unique to the Cow Pi mk1f.
 *
 ******************************************************************************/

/*
 * PollingLab (c) 2021-24 Christopher A. Bohn
 *
 * Starter code licensed under the Apache License, Version 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */

#include <CowPi.h>
#include <string.h>
#include "starter.h"

void initialize_timer(void);

static FILE *display;

void initialize_board(void) {
    display = cowpi_setup(9600,
                          cowpi_configure_lcd_character_display(),
                          cowpi_configure_i2c(cowpi_discover_i2c_address(SDA, SCL))
    );
    if (display == NULL) {
        int i2c_configuration_line = __LINE__ - 3;
        fprintf_P(stderr, PSTR("Display was not configured!\n ***"));
        int8_t i2c_address = cowpi_discover_i2c_address(SDA, SCL);
        if (i2c_address == 0) {
            fprintf_P(stderr, PSTR("No I2C device detected.\n"));
        } else if (i2c_address == -1) {
            fprintf_P(stderr, PSTR("Multiple I2C devices detected.\n"));
            fprintf_P(stderr, PSTR("Modify line %d to hard-code the correct I2C address.\n"), i2c_configuration_line);
        } else {
            fprintf_P(stderr, PSTR("This does not appear to be an I2C problem.\n"));
        }
        fprintf_P(stderr, PSTR("\nRe-assigning display module's output to the console"));
        fprintf_P(stderr, PSTR("so that you can work on other parts of the assignment.\n\n"));
        display = stdout;
    }
    initialize_timer();
}

/*******************************/
/***** DISPLAY MODULE CODE *****/
/*******************************/

static bool display_needs_refreshed;
static char rows[2][17] = { {"                "}, {"                "} };
    
void display_string(int row, char const string[]) {
    if (0 <= row && row < 2) {
        sprintf(rows[row], "%-16s", string);
    }
    display_needs_refreshed = true;
}

void refresh_display(void) {
    if (display_needs_refreshed) {
        fprintf(display, "\f%s\n%s\f", rows[0], rows[1]);
    }
}

/**********************/
/***** TIMER CODE *****/
/**********************/

uint32_t volatile timer_overflow_count = 0;

void initialize_timer(void) {
    OCR0A = 0xF0;
    TIMSK0 |= 1 << 1;
}

ISR(TIMER0_COMPA_vect) {
    timer_overflow_count++;
}
