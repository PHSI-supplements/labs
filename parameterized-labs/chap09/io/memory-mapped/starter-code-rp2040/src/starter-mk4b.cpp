/*                       *
 * DO NOT EDIT THIS FILE *
 *                       */

/**************************************************************************//**
 *
 * @file starter-mk1f.cpp
 *
 * @author Christopher A. Bohn
 *
 * @brief Driver code for PollingLab that is unique to the Cow Pi mk1f.
 *
 ******************************************************************************/

/*
 * PollingLab (c) 2021-24 Christopher A. Bohn
 *
 * Starter code licensed under the Apache License, Version 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */

#include <CowPi.h>
#include <string.h>
#include <OneBitDisplay.h>
#include "starter.h"

void initialize_display(void);

void initialize_board(void) {
    cowpi_setup(9600,
                (cowpi_display_module_t) {.display_module = NO_MODULE},
                (cowpi_display_module_protocol_t) {.protocol = NO_PROTOCOL}
    );
    initialize_display();
}

/*******************************/
/***** DISPLAY MODULE CODE *****/
/*******************************/

static uint8_t backbuffer[1024] = {0};
static OBDISP display;
static bool display_needs_refreshed;

void initialize_display(void) {
    obdI2CInit(&display, OLED_128x64, -1, 0, 0, 1, -1, -1, -1, 400000L);
    obdSetBackBuffer(&display, backbuffer);
    obdFill(&display, OBD_WHITE, 0);
    display_needs_refreshed = true;
}

void display_string(int row, char const string[]) {
    static char rows[8][17] = {
            {"                "}, {"                "}, {"                "}, {"                "},
            {"                "}, {"                "}, {"                "}, {"                "}
    };
    if (0 <= row && row < 8) {
        sprintf(rows[row], "%-16s", string);
    }
    obdWriteString(&display, 0, 0, 8 * row, rows[row], FONT_8x8, OBD_BLACK, 0);
    display_needs_refreshed = true;
}

void refresh_display(void) {
    if (display_needs_refreshed) {
        obdDumpBuffer(&display, backbuffer);
        display_needs_refreshed = false;
    }
}
