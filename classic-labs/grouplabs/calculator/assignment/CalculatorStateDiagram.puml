@startuml
skinparam state {
    BackgroundColor Red
    BackgroundColor<<Invariant>> LightYellow
    BackgroundColor<<Assignment>> LightGreen
}


state "initialize" as Initialize<<Assignment>>
Initialize : //operand1// = 0
Initialize : //operand2// = ⊥
Initialize : • = ⊥

state "clear //operand1//" as ClearOp1<<Assignment>>
ClearOp1 : //operand1// = 0
ClearOp1 : • = ⊥

state "clear //operand2//" as ClearOp2<<Assignment>>
ClearOp2 : //operand2// = ⊥
ClearOp2 : • = ⊥

state "set operator" as SetOperator<<Assignment>>
SetOperator : • = +,-,×,÷ as appropriate

state "start //operand2// (no operation)" as StartOp2NoOp<<Assignment>>
StartOp2NoOp : //operand2// = 0..9 as appropriate

state "start //operand2// (with operation)" as StartOp2WithOp<<Assignment>>
StartOp2WithOp : //operand2// = 0..9 as appropriate

state "update //operand2// (no operation)" as UpdateOp2NoOp<<Assignment>>
UpdateOp2NoOp : update //operand2//

state "update //operand2// (with operation)" as UpdateOp2WithOp<<Assignment>>
UpdateOp2WithOp : update //operand2//

state "reassign //operand1//" as ReassignOp1NoOp<<Assignment>>
ReassignOp1NoOp : //operand1// = //operand2//
ReassignOp1NoOp : //operand2// = ⊥

state "reassign //operand1// with operator" as ReassignOp1WithOp<<Assignment>>
ReassignOp1WithOp : //operand1// = //operand2//
ReassignOp1WithOp : //operand2// = ⊥
ReassignOp1WithOp : • = +,-,×,÷ as appropriate

state "compute //operand1//" as ComputeOp1NoOp<<Assignment>>
ComputeOp1NoOp : //operand1// = //operand1// • //operand2//
ComputeOp1NoOp : //operand2// = ⊥
ComputeOp1NoOp : • = ⊥

state "compute //operand1// with operator" as ComputeOp1WithOp<<Assignment>>
ComputeOp1WithOp : //operand1// = //operand1// • //operand2//
ComputeOp1WithOp : //operand2// = ⊥
ComputeOp1WithOp : • = +,-,×,÷ as appropriate


state "Only //operand1// is Defined" as Op1DisplayedNoOperation<<Invariant>>
Op1DisplayedNoOperation : //operand2// == ⊥
Op1DisplayedNoOperation : • == ⊥
Op1DisplayedNoOperation : display shows //operand1//

state "Building //operand2// without Operation" as BuildingOp2NoOperation<<Invariant>>
BuildingOp2NoOperation : • == ⊥
BuildingOp2NoOperation : display shows //operand2//

state "Operation Specified but //operand2// Undefined" as Op1DisplayedOperationDefined<<Invariant>>
Op1DisplayedOperationDefined : //operand2// == ⊥
Op1DisplayedOperationDefined : display shows //operand1//

state "Building //operand2// with Operation" as BuildingOp2OperationDefined<<Invariant>>
BuildingOp2OperationDefined : display shows operand2


[*] --> Initialize
Initialize --> Op1DisplayedNoOperation

Op1DisplayedNoOperation --> SetOperator : [A,B,C,D pressed]
SetOperator --> Op1DisplayedOperationDefined
Op1DisplayedNoOperation --> StartOp2NoOp : [Numeral pressed]
StartOp2NoOp --> BuildingOp2NoOperation

Op1DisplayedOperationDefined --> SetOperator : [A,B,C,D] pressed
Op1DisplayedOperationDefined --> StartOp2WithOp : [numeral pressed]
StartOp2WithOp --> BuildingOp2OperationDefined

BuildingOp2NoOperation --> UpdateOp2NoOp : [Numeral pressed]
UpdateOp2NoOp --> BuildingOp2NoOperation
BuildingOp2NoOperation --> ReassignOp1NoOp : [# pressed]
ReassignOp1NoOp --> Op1DisplayedNoOperation
BuildingOp2NoOperation --> ReassignOp1WithOp : [A,B,C,D pressed]
ReassignOp1WithOp --> Op1DisplayedOperationDefined

BuildingOp2OperationDefined --> UpdateOp2WithOp : [Numeral pressed]
UpdateOp2WithOp --> BuildingOp2OperationDefined
BuildingOp2OperationDefined --> ComputeOp1NoOp : [# pressed]
ComputeOp1NoOp --> Op1DisplayedNoOperation
BuildingOp2OperationDefined --> ComputeOp1WithOp : [A,B,C,D pressed]
ComputeOp1WithOp --> Op1DisplayedOperationDefined

Op1DisplayedNoOperation --> ClearOp1 : [Right button pressed]
Op1DisplayedOperationDefined --> ClearOp1 : [Right button pressed]
ClearOp1 --> Op1DisplayedNoOperation

BuildingOp2NoOperation --> ClearOp2 : [Right button pressed]
BuildingOp2OperationDefined --> ClearOp2 : [Right button pressed]
ClearOp2 -left-> Op1DisplayedNoOperation


@enduml
